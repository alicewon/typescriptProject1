{"version":3,"sources":["src/interfaces.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.04d77525.map","sourceRoot":"..","sourcesContent":["export interface Person {\n    name?: string, // optional param (?)\n    age: number\n}\n\nenum Job { \n    WebDev,\n    WebDesigner, \n    PM \n}\n\nexport default Job\n\nexport enum Type2 {\n    Video = \"VIDEO\", // 0 default unless declared\n    BlogPost = \"BLOG_POST\", // 1\n    Quiz = \"QUIZ\" // 2\n}","import Job, {Person, Type2} from './interfaces'\n\nconst isOpen: boolean = false\n\nconst myName: string = 'alice'\n\nconst age: number = 30\n\nconst list: number[] = [0,1,2,3]\n\n// tuple: has to follow order of types declared\nconst me: [string, number] = [\"Alice\", 30]\n\n// enum\n// enum Job { WebDev, WebDesigner, PM }\nconst job: Job = Job.WebDev\n\n// any\nconst phone: any = \"Pixel\"\nconst tablet: any = 3\n\n// never\n// undefined\n// null\n\n// Functions in TS\n// ? for optional params\n// const sayWord = (word?: string) :string => {\n//     console.log(word || \"Hello\")\n//     return word || \"Hello\"\n// }\n\n// sayWord()\n\n\n// default params\n// Rest params work as expected\nconst sayWord = (word = \"Hello\", ...otherStuff: string[]) :string => {\n    console.log(otherStuff)\n    return word\n}\n\nsayWord(\"Scott\", \"Wes\")\n\n// Implicit types in TS\nlet newName: string | number | boolean = 'Scott' \nnewName = \"Wes\"\n// newName = 10\n// newName = false\nconsole.log(newName)\n\n// Inferring type from a variable, from INITIAL declaration, not the current value\nlet newNameTwo = newName \n// newNameTwo = 11\n\n// Union Types with |\nconst makeMargin = (x: string | number): string => {\n    return `margin: ${x}px`;\n}\n\nmakeMargin(10)\n\n\n//Null and Undefined types\n\nlet dog: string = \"sammy\"\ndog = null\nconsole.log(dog)\ndog = \"Lucy\"\ndog = undefined\n// dog = 10\n// dog = false\n\n\n// Interface (similar to GraphQL) - allows to check for object shape, or named params\n// Replacement for named parameters\n// interface Person {\n//     name?: string, // optional param (?)\n//     age: number\n// }\n\nconst sayName = ({name, age}: Person): string => {\n    console.log(name, age)\n    return name\n}\n\n// sayName({\n//     name: \"Alice\", \n//     age: 32\n// })\n\nsayName({\n    age: 32,\n    // name: \"Alice\", \n})\n// order of params matters when not using an interface. Once interface is defined, you don't need to specify order\n\n//TS Docs example:\ninterface LabeledValue {\n    label: string\n}\n\nfunction printLable(labeledObj: LabeledValue){\n    console.log(labeledObj.label)\n}\n\nlet myObj = {size: 10, label: \"Size 10 Object\"}\n\nprintLable(myObj)\n\n//Enumzzz - define a set of named constants, list of exact items\n\n// enum Type2 {\n//     Video = \"VIDEO\", // 0 default unless declared\n//     BlogPost = \"BLOG_POST\", // 1\n//     Quiz = \"QUIZ\" // 2\n// }\n\nconst createContent2 = (contentType: Type2) => {}\ncreateContent2(Type2.Video)\nconsole.log(Type2.Quiz)\n\n\n// Classes\n\nclass Team {\n   readonly teamName: string //readonly - prevents from being changed\n//    public teamName: string\n\n    constructor(teamName) {\n        this.teamName = teamName\n    }\n    score(): string {\n        console.log(this.teamName)\n        return \"goal!\"\n    }\n}\n\nconst redWings = new Team('Red Wings')\nredWings.score()\nredWings.teamName\n\n// Generics\nconst outputInput = <T>(arg: T): T => {\n    return arg\n}\n\nconst output: string = outputInput(\"hi\")\noutputInput(3)"]}